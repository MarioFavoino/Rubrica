package View;

import Model.Contatto;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
/**
 *
 * @author studente7
 */
public class ContattoDialog extends javax.swing.JDialog {

    private ContattoListener contattoListener;

    /**
     * Creates new form ContattoDialog
     */
    public ContattoDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setIconImage(new ImageIcon(getClass().getResource("/photo/person.png")).getImage());
        initComponents();
        init();
    }

    private void init() {
        initPrefisso();
    }

    private void initPrefisso() {
        try {
            caricaPrefissi();   // Carica i prefissi in maniera separata
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Errore nel caricamento dei prefissi.");
        }
    }

    public void addContattoListener(ContattoListener contattoListener) {
        this.contattoListener = contattoListener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCognome = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        listaPrefissi = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(150, 0), new java.awt.Dimension(32767, 0));
        annullaButton = new javax.swing.JButton();
        confermaButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jLabel5.setText("Nome *");

        jLabel6.setText("Cognome *");

        jLabel7.setText("Telefono *");

        jLabel8.setText("Email");

        listaPrefissi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caricamento..." }));
        listaPrefissi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaPrefissiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(txtCognome)
                    .addComponent(txtEmail)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(listaPrefissi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTelefono)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCognome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaPrefissi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        jLabel1.setText("* Campi Obbligatori");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(jLabel1);
        jPanel1.add(filler1);

        annullaButton.setText("Annulla");
        annullaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annullaButtonActionPerformed(evt);
            }
        });
        jPanel1.add(annullaButton);

        confermaButton.setText("Conferma");
        confermaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confermaButtonActionPerformed(evt);
            }
        });
        jPanel1.add(confermaButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confermaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confermaButtonActionPerformed

        if (contattoListener != null) {
            contattoListener.confermaActionPerformed();

        }


    }//GEN-LAST:event_confermaButtonActionPerformed

    private void annullaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaButtonActionPerformed
        dispose();
    }//GEN-LAST:event_annullaButtonActionPerformed

    private void listaPrefissiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaPrefissiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaPrefissiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annullaButton;
    private javax.swing.JButton confermaButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> listaPrefissi;
    private javax.swing.JTextField txtCognome;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    public Contatto getContatto() {
        String cognome = txtCognome.getText();
        String nome = txtNome.getText();
        String telefono = txtTelefono.getText();
        String email = txtEmail.getText();

        try {
            // Controllo del numero di telefono con regex
            if (!telefono.matches("\\d{9,}")) {
                throw new IllegalArgumentException("Il numero deve contenere solo cifre (min. 9).");
            }

            // Se l'email non è vuota, controlla la validità con regex
            if (!email.isBlank() && !email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
                throw new IllegalArgumentException("Email non valida.");
            }

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Errore", JOptionPane.ERROR_MESSAGE);
            return null; // Blocca la creazione del contatto
        }

        // Ottieni il prefisso selezionato dalla JComboBox
        String prefissoSelezionato = (String) listaPrefissi.getSelectedItem();

        // Estrai solo il prefisso dalla stringa "Paese (Prefisso)" nella JComboBox
        String prefisso = "";
        if (prefissoSelezionato != null && prefissoSelezionato.contains("(")) {
            prefisso = prefissoSelezionato.substring(prefissoSelezionato.indexOf("(") + 1, prefissoSelezionato.indexOf(")"));
        }

        // Aggiungi il prefisso al numero di telefono
        String numeroConPrefisso = prefisso + telefono;

        return new Contatto(nome, cognome, numeroConPrefisso, email);
    }

    private void caricaPrefissi() throws IOException {
        ArrayList<String> prefissiVisualizzati = new ArrayList<>();
        ArrayList<String> prefissiEffettivi = new ArrayList<>();  // Memorizza solo i prefissi reali

        try (InputStream input = getClass().getResourceAsStream("/risorse/prefissi.csv"); BufferedReader br = new BufferedReader(new InputStreamReader(input, StandardCharsets.UTF_8))) {

            String line;
            boolean primaRiga = true;

            while ((line = br.readLine()) != null) {
                if (primaRiga) {  // Salta l'intestazione
                    primaRiga = false;
                    continue;
                }
                String[] parts = line.split(",");
                if (parts.length == 2) {
                    String paese = parts[0];
                    String prefisso = parts[1];

                    // Aggiungi la stringa "Paese (Prefisso)" alla lista di visualizzazione
                    prefissiVisualizzati.add(paese + " (" + prefisso + ")");
                    prefissiEffettivi.add(prefisso);  // Memorizza solo il prefisso per l'uso interno
                }
            }

            // Riempie la JComboBox con i prefissi visualizzati
            listaPrefissi.setModel(new javax.swing.DefaultComboBoxModel<>(prefissiVisualizzati.toArray(new String[0])));
            listaPrefissi.setPreferredSize(new Dimension(90, 25));

            // Imposta un renderer personalizzato
            listaPrefissi.setRenderer(new javax.swing.ListCellRenderer<String>() {
                @Override
                public java.awt.Component getListCellRendererComponent(
                        javax.swing.JList<? extends String> list,
                        String value,
                        int index,
                        boolean isSelected,
                        boolean cellHasFocus) {

                    javax.swing.JLabel label = new javax.swing.JLabel();

                    // Quando la lista è chiusa, mostra solo il prefisso
                    if (index == -1) {
                        if (value != null && value.contains("(") && value.contains(")")) {
                            String prefisso = value.substring(value.indexOf("(") + 1, value.indexOf(")"));
                            label.setText(prefisso);  // Mostra solo il prefisso
                        }
                    } else {
                        // Quando la lista è aperta, mostra paese + prefisso
                        label.setText(value != null ? value : "");
                    }

                    return label;
                }
            });

        } catch (NullPointerException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Errore nel caricamento del file CSV!");
        }
    }

}
